@page
@model QtecAccountsWeb.Pages.Vouchers.CreateModel
@{
    ViewData["Title"] = "Create New Voucher";
}

<h1>@ViewData["Title"]</h1>
<hr />

<form method="post">
    @* This part is for the Voucher Header *@
    <div class="row">
        <div asp-validation-summary="ModelOnly" class="text-danger"></div>
        <div class="col-md-3">
            <label asp-for="Voucher.VoucherDate" class="form-label"></label>
            <input asp-for="Voucher.VoucherDate" type="date" class="form-control" />
        </div>
        <div class="col-md-3">
            <label asp-for="Voucher.VoucherType" class="form-label"></label>
            <select asp-for="Voucher.VoucherType" class="form-control">
                <option value="Journal">Journal Voucher</option>
                <option value="Payment">Payment Voucher</option>
                <option value="Receipt">Receipt Voucher</option>
            </select>
        </div>
        <div class="col-md-3">
            <label asp-for="Voucher.RefNo" class="form-label"></label>
            <input asp-for="Voucher.RefNo" class="form-control" />
        </div>
        <div class="col-md-3">
            <label asp-for="Voucher.Narration" class="form-label"></label>
            <input asp-for="Voucher.Narration" class="form-control" />
        </div>
    </div>

    <hr />

    @* This part is for the Voucher Details table *@
    <h4 class="mt-4">Voucher Details</h4>

    <table class="table table-bordered">
        <thead>
            <tr>
                <th style="width: 40%;">Account</th>
                <th style="width: 20%;">Debit</th>
                <th style="width: 20%;">Credit</th>
                <th style="width: 10%;"></th>
            </tr>
        </thead>
        <tbody id="voucherDetailsTableBody">
            @* The dynamic rows will be added here by JavaScript *@
        </tbody>
        <tfoot>
            <tr>
                <td class="text-end"><strong>Total:</strong></td>
                <td><strong id="totalDebit">0.00</strong></td>
                <td><strong id="totalCredit">0.00</strong></td>
                <td></td>
            </tr>
        </tfoot>
    </table>

    <button type="button" id="btnAddRow" class="btn btn-success">Add New Row</button>
    <button type="submit" class="btn btn-primary">Save Voucher</button>
</form>

@* ======================================================================= *@
@* This section contains the JavaScript logic for the dynamic form. *@
@* ======================================================================= *@
@section Scripts {
    <script>
        // Wait for the entire page to load before running our script
        document.addEventListener('DOMContentLoaded', function () {
            const addRowBtn = document.getElementById('btnAddRow');
            const tableBody = document.getElementById('voucherDetailsTableBody');

            // This function adds a new, empty row to our table
            function addNewRow() {
                // Get the current number of rows. This will be the index for our new row.
                const index = tableBody.rows.length;

                // Create a new table row element
                const newRow = document.createElement('tr');
                newRow.innerHTML = `
                    <td>
                        <select name="Voucher.Details[${index}].AccountId" class="form-control account-dropdown" required>
                            <option value="">-- Select Account --</option>
                            @foreach (var item in Model.AccountList)
                            {
                                    <option value="@item.Value">@item.Text</option>
                            }
                        </select>
                    </td>
                    <td>
                        <input type="number" name="Voucher.Details[${index}].DebitAmount" class="form-control debit-input" value="0.00" min="0" step="0.01" />
                    </td>
                    <td>
                        <input type="number" name="Voucher.Details[${index}].CreditAmount" class="form-control credit-input" value="0.00" min="0" step="0.01" />
                    </td>
                    <td>
                        <button type="button" class="btn btn-danger btn-sm btn-delete-row">Delete</button>
                    </td>
                `;

                // Append the new row to the table body
                tableBody.appendChild(newRow);
            }

            // This function recalculates and updates the total debit and credit amounts
            function calculateTotals() {
                let totalDebit = 0;
                let totalCredit = 0;

                // Loop through all debit and credit inputs and sum them up
                document.querySelectorAll('.debit-input').forEach(input => totalDebit += parseFloat(input.value) || 0);
                document.querySelectorAll('.credit-input').forEach(input => totalCredit += parseFloat(input.value) || 0);

                // Display the totals
                document.getElementById('totalDebit').textContent = totalDebit.toFixed(2);
                document.getElementById('totalCredit').textContent = totalCredit.toFixed(2);
            }

            // This function re-indexes all the form inputs.
            // This is CRITICAL for model binding to work correctly on the server.
            function reindexRows() {
                const rows = tableBody.querySelectorAll('tr');
                rows.forEach((row, index) => {
                    row.querySelector('.account-dropdown').name = `Voucher.Details[${index}].AccountId`;
                    row.querySelector('.debit-input').name = `Voucher.Details[${index}].DebitAmount`;
                    row.querySelector('.credit-input').name = `Voucher.Details[${index}].CreditAmount`;
                });
            }

            // Event listener for the "Add New Row" button
            addRowBtn.addEventListener('click', function () {
                addNewRow();
            });

            // Event listener for the whole table body to handle dynamic events
            tableBody.addEventListener('click', function(e) {
                // If a delete button was clicked
                if (e.target && e.target.classList.contains('btn-delete-row')) {
                    // Find the parent row and remove it
                    e.target.closest('tr').remove();
                    // After deleting, we must re-index the remaining rows and recalculate totals.
                    reindexRows();
                    calculateTotals();
                }
            });

            tableBody.addEventListener('input', function(e) {
                // If a debit or credit input was changed
                if (e.target && (e.target.classList.contains('debit-input') || e.target.classList.contains('credit-input'))) {
                    // Recalculate the totals in real-time
                    calculateTotals();
                }
            });

            // Add two initial rows when the page loads to get the user started
            addNewRow();
            addNewRow();
        });
    </script>
}